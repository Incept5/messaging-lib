version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

jobs:
  build-and-test:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Install JDK 21
          command: |
            sudo apt-get update -y
            sudo apt-get install -y openjdk-21-jdk
            java -version
      - run:
          name: Ensure Docker is running
          command: |
            docker --version
            docker info
            docker ps
      - gradle/with_cache:
          steps:
            - run:
                name: Build and Test
                command: ./gradlew clean build
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports
          destination: reports

  publish-to-maven:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Install JDK 21
          command: |
            sudo apt-get update -y
            sudo apt-get install -y openjdk-21-jdk
            java -version
      - run:
          name: Ensure Docker is running
          command: |
            docker --version
            docker info
            docker ps
      - run:
          name: Set Version Based on Branch
          command: |
            # Determine if this is a main branch build or a feature branch build
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              # For main branch, use a release version with build number
              echo "export VERSION=1.0.${CIRCLE_BUILD_NUM}" >> $BASH_ENV
              echo "export IS_SNAPSHOT=false" >> $BASH_ENV
            else
              # For feature branches, use a SNAPSHOT version
              echo "export VERSION=1.0.0-SNAPSHOT" >> $BASH_ENV
              echo "export IS_SNAPSHOT=true" >> $BASH_ENV
            fi
            source $BASH_ENV
            echo "Using version: ${VERSION} (IS_SNAPSHOT: ${IS_SNAPSHOT})"
      - gradle/with_cache:
          steps:
            - run:
                name: Build with Version
                command: |
                  echo "Using version: ${VERSION}"
                  ./gradlew clean build -Pversion=${VERSION}
            - run:
                name: Publish to Local Maven Repository
                command: |
                  echo "Publishing with version: ${VERSION}"
                  ./gradlew publishToMavenLocal -Pversion=${VERSION}
      - run:
          name: Create and Push Git Tag (Main Branch Only)
          command: |
            # Only create tags for main branch (non-snapshot) builds
            if [ "${IS_SNAPSHOT}" == "false" ]; then
              echo "Creating tag for version: ${VERSION}"
              git config user.email "ci@incept5.com"
              git config user.name "CircleCI"
              
              # Check if tag already exists
              if git rev-parse "${VERSION}" >/dev/null 2>&1; then
                echo "Tag ${VERSION} already exists, skipping tag creation"
              else
                echo "Creating new tag ${VERSION}"
                git tag -a "${VERSION}" -m "Release version ${VERSION}"
                git push origin "${VERSION}"
              fi
            else
              echo "Skipping tag creation for SNAPSHOT version"
            fi
      - run:
          name: Trigger JitPack Build (Main Branch Only)
          command: |
            # Only trigger JitPack for main branch (non-snapshot) builds
            if [ "${IS_SNAPSHOT}" == "false" ]; then
              # Debug information
              echo "Maven repository location: $HOME/.m2/repository"
              echo "Using version: ${VERSION}"
              
              # List all artifacts in the local Maven repository
              echo "All artifacts in Maven repository:"
              find $HOME/.m2/repository/com/github/incept5 -type f -name "*.jar" | sort
              
              if [ ! -f "$HOME/.m2/repository/com/github/incept5/messaging-core/${VERSION}/messaging-core-${VERSION}.jar" ]; then
                echo "messaging: messaging-core JAR not found locally at expected path"
                echo "Expected: $HOME/.m2/repository/com/github/incept5/messaging-core/${VERSION}/messaging-core-${VERSION}.jar"
              
                # Check if the directory exists
                if [ -d "$HOME/.m2/repository/com/github/incept5/messaging-core" ]; then
                  echo "Available versions for messaging-core:"
                  ls -la "$HOME/.m2/repository/com/github/incept5/messaging-core/"
                fi
              
                # Try to find it elsewhere
                echo "Searching for messaging-core JAR:"
                find $HOME/.m2/repository -name "messaging-core-*.jar" | sort
              
                # Try one more publish with explicit version
                echo "Attempting one more publish with explicit version ${VERSION}"
                ./gradlew :messaging-core:clean :messaging-core:build :messaging-core:publishToMavenLocal -Pversion=${VERSION} --stacktrace
              
                # Check again
                if [ -f "$HOME/.m2/repository/com/github/incept5/messaging-core/${VERSION}/messaging-core-${VERSION}.jar" ]; then
                  echo "Successfully published messaging-core JAR after retry"
                else
                  echo "Failed to publish messaging-core JAR after retry"
                  exit 1
                fi
              fi
              
              if [ ! -f "$HOME/.m2/repository/com/github/incept5/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar" ]; then
                echo "messaging: messaging-quarkus JAR not found locally at expected path"
                echo "Expected: $HOME/.m2/repository/com/github/incept5/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar"
              
                # Check if the directory exists
                if [ -d "$HOME/.m2/repository/com/github/incept5/messaging-quarkus" ]; then
                  echo "Available versions for messaging-quarkus:"
                  ls -la "$HOME/.m2/repository/com/github/incept5/messaging-quarkus/"
                fi
              
                # Try to find it elsewhere
                echo "Searching for messaging-quarkus JAR:"
                find $HOME/.m2/repository -name "messaging-quarkus-*.jar" | sort
              
                # Try one more publish with explicit version
                echo "Attempting one more publish with explicit version ${VERSION}"
                ./gradlew :messaging-quarkus:clean :messaging-quarkus:build :messaging-quarkus:publishToMavenLocal -Pversion=${VERSION} --stacktrace
              
                # Check again
                if [ -f "$HOME/.m2/repository/com/github/incept5/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar" ]; then
                  echo "Successfully published messaging-quarkus JAR after retry"
                else
                  echo "Failed to publish messaging-quarkus JAR after retry"
                  exit 1
                fi
              fi
              
              echo "Both artifacts verified locally"
              
              # Trigger JitPack build by making a request to the JitPack URL with the version tag
              echo "Triggering JitPack build for version ${VERSION}"
              # Trigger the root project build on JitPack
              curl -s "https://jitpack.io/com/github/incept5/messaging-lib/${VERSION}/messaging-lib-${VERSION}.pom" || true
              
              echo "JitPack build triggered for version ${VERSION}"
              echo "Root project will be available at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
              echo "Modules will be available at:"
              echo "- https://jitpack.io/#incept5/messaging-lib/messaging-core/${VERSION}"
              echo "- https://jitpack.io/#incept5/messaging-lib/messaging-quarkus/${VERSION}"
              
              # Wait for JitPack to process the build
              echo "Waiting for JitPack to process the build..."
              sleep 180  # Increased wait time to allow JitPack to process
              
              # Verify the build status for the root project
              ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/messaging-lib/${VERSION}/messaging-lib-${VERSION}.pom")
              if [ "$ROOT_STATUS" -eq 200 ]; then
                echo "Root project successfully published to JitPack!"
              else
                echo "Root project not found on JitPack. Status code: $ROOT_STATUS"
                echo "Check status at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
              fi
              
              # Verify the build status for messaging-core module
              CORE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/messaging-lib/messaging-core/${VERSION}/messaging-core-${VERSION}.jar")
              if [ "$CORE_STATUS" -eq 200 ]; then
                echo "messaging-core artifact successfully published to JitPack!"
              else
                echo "messaging-core artifact not found on JitPack. Status code: $CORE_STATUS"
                echo "Check status at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
              fi
              
              # Verify the build status for messaging-quarkus module
              QUARKUS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/messaging-lib/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar")
              if [ "$QUARKUS_STATUS" -eq 200 ]; then
                echo "messaging-quarkus artifact successfully published to JitPack!"
              else
                echo "messaging-quarkus artifact not found on JitPack. Status code: $QUARKUS_STATUS"
                echo "Check status at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
              fi
              
              # Final verification
              if [ "$ROOT_STATUS" -eq 200 ] && [ "$CORE_STATUS" -eq 200 ] && [ "$QUARKUS_STATUS" -eq 200 ]; then
                echo "All artifacts successfully published to JitPack!"
              else
                echo "WARNING: One or more artifacts may not be available yet on JitPack."
                echo "This is normal as JitPack may take some time to process the build."
                echo ""
                echo "To use these artifacts in your project:"
                echo "1. Add the JitPack repository to your build file"
                echo "   repositories {"
                echo "     maven { url 'https://jitpack.io' }"
                echo "   }"
                echo ""
                echo "2. Add the dependencies"
                echo "   dependencies {"
                echo "     implementation 'com.github.incept5.messaging-lib:messaging-core:${VERSION}'"
                echo "     implementation 'com.github.incept5.messaging-lib:messaging-quarkus:${VERSION}'"
                echo "   }"
                echo ""
                echo "3. Or use the root project (includes all modules)"
                echo "   dependencies {"
                echo "     implementation 'com.github.incept5:messaging-lib:${VERSION}'"
                echo "   }"
                echo ""
              fi
            else
              echo "Skipping JitPack publishing for SNAPSHOT version"
            fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      - build-and-test
      - publish-to-maven:
          requires:
            - build-and-test