version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:21.0
    steps:
      - checkout
      - gradle/with_cache:
          steps:
            - run:
                name: Build and Test
                command: ./gradlew clean build
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports
          destination: reports

  publish-to-jitpack:
    docker:
      - image: cimg/openjdk:21.0
    steps:
      - checkout
      - run:
          name: Set Build Number
          command: |
            # Use the CircleCI build number directly without additional processing
            echo "export BUILD_NUMBER=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            source $BASH_ENV
            echo "Using build number: ${BUILD_NUMBER}"
      - gradle/with_cache:
          steps:
            - run:
                name: Build with Build Number
                command: |
                  echo "Using build number: ${BUILD_NUMBER}"
                  ./gradlew clean build -Pversion=1.0.${BUILD_NUMBER}
            - run:
                name: Publish to Local Maven Repository
                command: |
                  echo "Publishing with version: 1.0.${BUILD_NUMBER}"
                  ./gradlew publishToMavenLocal -Pversion=1.0.${BUILD_NUMBER}
      - run:
          name: Create and Push Git Tag
          command: |
            # Create a git tag with the version number
            VERSION="1.0.${BUILD_NUMBER}"
            echo "Creating tag for version: ${VERSION}"
            git config user.email "ci@incept5.com"
            git config user.name "CircleCI"
            
            # Check if tag already exists
            if git rev-parse "${VERSION}" >/dev/null 2>&1; then
              echo "Tag ${VERSION} already exists, skipping tag creation"
            else
              echo "Creating new tag ${VERSION}"
              git tag -a "${VERSION}" -m "Release version ${VERSION}"
              git push origin "${VERSION}"
            fi
      - run:
          name: Trigger JitPack Build
          command: |
            VERSION="1.0.${BUILD_NUMBER}"
            
            # Debug information
            echo "Maven repository location: $HOME/.m2/repository"
            echo "Using version: ${VERSION}"
            
            # List all artifacts in the local Maven repository
            echo "All artifacts in Maven repository:"
            find $HOME/.m2/repository/com/github/incept5 -type f -name "*.jar" | sort
            
            # Verify that both JARs exist locally
            if [ ! -f "$HOME/.m2/repository/com/github/incept5/messaging-core/${VERSION}/messaging-core-${VERSION}.jar" ]; then
              echo "messaging: messaging-core JAR not found locally at expected path"
              echo "Expected: $HOME/.m2/repository/com/github/incept5/messaging-core/${VERSION}/messaging-core-${VERSION}.jar"
              
              # Check if the directory exists
              if [ -d "$HOME/.m2/repository/com/github/incept5/messaging-core" ]; then
                echo "Available versions for messaging-core:"
                ls -la "$HOME/.m2/repository/com/github/incept5/messaging-core/"
              fi
              
              # Try to find it elsewhere
              echo "Searching for messaging-core JAR:"
              find $HOME/.m2/repository -name "messaging-core-*.jar" | sort
              
              # Try one more publish with explicit version
              echo "Attempting one more publish with explicit version ${VERSION}"
              ./gradlew :messaging-core:clean :messaging-core:build :messaging-core:publishToMavenLocal -Pversion=${VERSION} --stacktrace
              
              # Check again
              if [ -f "$HOME/.m2/repository/com/github/incept5/messaging-core/${VERSION}/messaging-core-${VERSION}.jar" ]; then
                echo "Successfully published messaging-core JAR after retry"
              else
                echo "Failed to publish messaging-core JAR after retry"
                exit 1
              fi
            fi
            
            if [ ! -f "$HOME/.m2/repository/com/github/incept5/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar" ]; then
              echo "messaging: messaging-quarkus JAR not found locally at expected path"
              echo "Expected: $HOME/.m2/repository/com/github/incept5/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar"
              
              # Check if the directory exists
              if [ -d "$HOME/.m2/repository/com/github/incept5/messaging-quarkus" ]; then
                echo "Available versions for messaging-quarkus:"
                ls -la "$HOME/.m2/repository/com/github/incept5/messaging-quarkus/"
              fi
              
              # Try to find it elsewhere
              echo "Searching for messaging-quarkus JAR:"
              find $HOME/.m2/repository -name "messaging-quarkus-*.jar" | sort
              
              # Try one more publish with explicit version
              echo "Attempting one more publish with explicit version ${VERSION}"
              ./gradlew :messaging-quarkus:clean :messaging-quarkus:build :messaging-quarkus:publishToMavenLocal -Pversion=${VERSION} --stacktrace
              
              # Check again
              if [ -f "$HOME/.m2/repository/com/github/incept5/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar" ]; then
                echo "Successfully published messaging-quarkus JAR after retry"
              else
                echo "Failed to publish messaging-quarkus JAR after retry"
                exit 1
              fi
            fi
            
            echo "Both artifacts verified locally"
            
            # Trigger JitPack build by making a request to the JitPack URL with the version tag
            echo "Triggering JitPack build for version ${VERSION}"
            # Trigger the root project build on JitPack
            curl -s "https://jitpack.io/com/github/incept5/messaging-lib/${VERSION}/messaging-lib-${VERSION}.pom" || true
            
            echo "JitPack build triggered for version ${VERSION}"
            echo "Root project will be available at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
            echo "Modules will be available at:"
            echo "- https://jitpack.io/#incept5/messaging-lib/messaging-core/${VERSION}"
            echo "- https://jitpack.io/#incept5/messaging-lib/messaging-quarkus/${VERSION}"
            
            # Wait for JitPack to process the build
            echo "Waiting for JitPack to process the build..."
            sleep 180  # Increased wait time to allow JitPack to process
            
            # Verify the build status for the root project
            ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/messaging-lib/${VERSION}/messaging-lib-${VERSION}.pom")
            if [ "$ROOT_STATUS" -eq 200 ]; then
              echo "Root project successfully published to JitPack!"
            else
              echo "Root project not found on JitPack. Status code: $ROOT_STATUS"
              echo "Check status at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
            fi
            
            # Verify the build status for messaging-core module
            CORE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/messaging-lib/messaging-core/${VERSION}/messaging-core-${VERSION}.jar")
            if [ "$CORE_STATUS" -eq 200 ]; then
              echo "messaging-core artifact successfully published to JitPack!"
            else
              echo "messaging-core artifact not found on JitPack. Status code: $CORE_STATUS"
              echo "Check status at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
            fi
            
            # Verify the build status for messaging-quarkus module
            QUARKUS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/messaging-lib/messaging-quarkus/${VERSION}/messaging-quarkus-${VERSION}.jar")
            if [ "$QUARKUS_STATUS" -eq 200 ]; then
              echo "messaging-quarkus artifact successfully published to JitPack!"
            else
              echo "messaging-quarkus artifact not found on JitPack. Status code: $QUARKUS_STATUS"
              echo "Check status at: https://jitpack.io/#incept5/messaging-lib/${VERSION}"
            fi
            
            # Final verification
            if [ "$ROOT_STATUS" -eq 200 ] && [ "$CORE_STATUS" -eq 200 ] && [ "$QUARKUS_STATUS" -eq 200 ]; then
              echo "All artifacts successfully published to JitPack!"
            else
              echo "WARNING: One or more artifacts may not be available yet on JitPack."
              echo "This is normal as JitPack may take some time to process the build."
              echo ""
              echo "To use these artifacts in your project:"
              echo "1. Add the JitPack repository to your build file"
              echo "   repositories {"
              echo "     maven { url 'https://jitpack.io' }"
              echo "   }"
              echo ""
              echo "2. Add the dependencies"
              echo "   dependencies {"
              echo "     implementation 'com.github.incept5.messaging-lib:messaging-core:${VERSION}'"
              echo "     implementation 'com.github.incept5.messaging-lib:messaging-quarkus:${VERSION}'"
              echo "   }"
              echo ""
              echo "3. Or use the root project (includes all modules)"
              echo "   dependencies {"
              echo "     implementation 'com.github.incept5:messaging-lib:${VERSION}'"
              echo "   }"
            fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      - build-and-test
      - publish-to-jitpack:
          requires:
            - build-and-test
          filters:
            branches:
              only: main
