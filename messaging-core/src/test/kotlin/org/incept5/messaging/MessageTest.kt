/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.incept5.messaging

import org.slf4j.LoggerFactory
import java.time.Instant
import java.util.UUID
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertNull
import kotlin.test.assertTrue

class MessageTest {

    companion object {
        val logger = LoggerFactory.getLogger(MessageTest::class.java)
    }

    @Test
    fun basicMessageTest() {
        val payload = ExamplePayload("foo", 42)
        val message = Message(topic = "topic", payload = payload)
        assertEquals("topic", message.topic)
        assertEquals(payload, message.getPayload())
        assertEquals("{\"name\":\"foo\",\"age\":42}", message.payloadJson)

        val payload2 = message.getPayloadAs(ExamplePayload2::class.java)
        assertEquals("foo", payload2.name)
    }

    @Test
    fun loggingTest(){
        val payload = ExamplePayload("foo", 42)
        val message = Message(topic = "topic", payload = payload)
        logger.info("Message is: {}", message)
    }
    
    @Test
    fun testMessageWithAllParameters() {
        val messageId = UUID.randomUUID()
        val createdAt = Instant.now()
        val correlationId = "test-correlation-id"
        val traceId = "test-trace-id"
        val replyTo = "reply-topic"
        
        val payload = ExamplePayload("test", 25)
        val message = Message(
            topic = "test-topic",
            payloadJson = "{\"name\":\"test\",\"age\":25}",
            type = ExamplePayload::class.java.name,
            messageId = messageId,
            createdAt = createdAt,
            correlationId = correlationId,
            traceId = traceId,
            replyTo = replyTo
        )
        
        assertEquals("test-topic", message.topic)
        assertEquals("{\"name\":\"test\",\"age\":25}", message.payloadJson)
        assertEquals(ExamplePayload::class.java.name, message.type)
        assertEquals(messageId, message.messageId)
        assertEquals(createdAt, message.createdAt)
        assertEquals(correlationId, message.correlationId)
        assertEquals(traceId, message.traceId)
        assertEquals(replyTo, message.replyTo)
        
        val retrievedPayload = message.getPayload<ExamplePayload>()
        assertEquals("test", retrievedPayload.name)
        assertEquals(25, retrievedPayload.age)
    }
    
    @Test
    fun testMessageWithDefaultValues() {
        val payload = ExamplePayload("test", 30)
        val message = Message(topic = "default-topic", payload = payload)
        
        assertEquals("default-topic", message.topic)
        assertEquals(ExamplePayload::class.java.name, message.type)
        assertNotNull(message.messageId)
        assertNotNull(message.createdAt)
        assertNotNull(message.correlationId)
        assertNotNull(message.traceId)
        assertNull(message.replyTo)
    }
    
    @Test
    fun testGetPayloadWithDifferentTypes() {
        // Test with a complex nested payload
        val nestedPayload = ComplexPayload(
            name = "complex",
            items = listOf("item1", "item2"),
            metadata = mapOf("key1" to "value1", "key2" to "value2"),
            nested = NestedObject("nested-name", 100)
        )
        
        val message = Message(topic = "complex-topic", payload = nestedPayload)
        
        // Test retrieving as the original type
        val retrievedPayload = message.getPayload<ComplexPayload>()
        assertEquals("complex", retrievedPayload.name)
        assertEquals(2, retrievedPayload.items.size)
        assertEquals("item1", retrievedPayload.items[0])
        assertEquals("value1", retrievedPayload.metadata["key1"])
        assertEquals("nested-name", retrievedPayload.nested.name)
        assertEquals(100, retrievedPayload.nested.value)
        
        // Test retrieving as KClass
        val kClassPayload = message.getPayloadAs(ComplexPayload::class)
        assertEquals("complex", kClassPayload.name)
    }
    
    @Test
    fun testStringPayload() {
        val stringPayload = "Simple string payload"
        val message = Message(topic = "string-topic", payload = stringPayload)
        
        assertEquals("string-topic", message.topic)
        assertEquals("\"Simple string payload\"", message.payloadJson)
        assertEquals(String::class.java.name, message.type)
        
        val retrievedPayload = message.getPayload<String>()
        assertEquals(stringPayload, retrievedPayload)
    }
}

data class ExamplePayload(val name: String, val age: Int)

data class ExamplePayload2(val name: String)

data class NestedObject(val name: String, val value: Int)

data class ComplexPayload(
    val name: String,
    val items: List<String>,
    val metadata: Map<String, String>,
    val nested: NestedObject
)
